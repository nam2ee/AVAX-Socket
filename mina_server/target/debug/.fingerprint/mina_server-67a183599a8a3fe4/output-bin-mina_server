{"$message_type":"diagnostic","message":"unresolved import `futures_util`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":133,"byte_end":145,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use futures_util::{StreamExt, SinkExt};","highlight_start":5,"highlight_end":17}],"label":"use of undeclared crate or module `futures_util`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `futures_util`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse futures_util::{StreamExt, SinkExt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `futures_util`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `split` found for struct `WebSocket` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1585,"byte_end":1590,"line_start":51,"line_end":51,"column_start":45,"column_end":50,"is_primary":true,"text":[{"text":"        let (mut ws_tx, mut ws_rx) = socket.split();","highlight_start":45,"highlight_end":50}],"label":"method not found in `WebSocket`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-util-0.3.30/src/stream/stream/mod.rs","byte_start":54748,"byte_end":54753,"line_start":1582,"line_end":1582,"column_start":8,"column_end":13,"is_primary":false,"text":[{"text":"    fn split<Item>(self) -> (SplitSink<Self, Item>, SplitStream<Self>)","highlight_start":8,"highlight_end":13}],"label":"the method is available for `WebSocket` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"trait `StreamExt` which provides `split` is implemented but not in scope; perhaps you want to import it","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":"use futures_util::stream::stream::StreamExt;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `split` found for struct `WebSocket` in the current scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:51:45\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut ws_tx, mut ws_rx) = socket.split();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `WebSocket`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-util-0.3.30/src/stream/stream/mod.rs:1582:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn split<Item>(self) -> (SplitSink<Self, Item>, SplitStream<Self>)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `WebSocket` here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait `StreamExt` which provides `split` is implemented but not in scope; perhaps you want to import it\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m+ use futures_util::stream::stream::StreamExt;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `subscribe` found for struct `tokio::sync::mpsc::Sender` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1677,"byte_end":1686,"line_start":55,"line_end":55,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"            let mut rx = tx.subscribe();","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a method `with_subscriber` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-0.1.40/src/instrument.rs","byte_start":5652,"byte_end":5753,"line_start":176,"line_end":178,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    fn with_subscriber<S>(self, subscriber: S) -> WithDispatch<Self>","highlight_start":5,"highlight_end":1},{"text":"    where","highlight_start":1,"highlight_end":1},{"text":"        S: Into<Dispatch>,","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `subscribe` found for struct `tokio::sync::mpsc::Sender` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:55:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut rx = tx.subscribe();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `with_subscriber` with a similar name, but with different arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-0.1.40/src/instrument.rs:176:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn with_subscriber<S>(self, subscriber: S) -> WithDispatch<Self>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        S: Into<Dispatch>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|__________________________^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `BlockData: Clone` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2430,"byte_end":2465,"line_start":79,"line_end":79,"column_start":20,"column_end":55,"is_primary":true,"text":[{"text":"    let (tx, rx) = tokio::sync::broadcast::channel(32);","highlight_start":20,"highlight_end":55}],"label":"the trait `Clone` is not implemented for `BlockData`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by a bound in `tokio::sync::broadcast::channel`","code":null,"level":"note","spans":[{"file_name":"/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.38.0/src/sync/broadcast.rs","byte_start":14492,"byte_end":14497,"line_start":459,"line_end":459,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"pub fn channel<T: Clone>(capacity: usize) -> (Sender<T>, Receiver<T>) {","highlight_start":19,"highlight_end":24}],"label":"required by this bound in `channel`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider annotating `BlockData` with `#[derive(Clone)]`","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":228,"byte_end":228,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"struct BlockData {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Clone)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `BlockData: Clone` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:79:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (tx, rx) = tokio::sync::broadcast::channel(32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Clone` is not implemented for `BlockData`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::sync::broadcast::channel`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.38.0/src/sync/broadcast.rs:459:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn channel<T: Clone>(capacity: usize) -> (Sender<T>, Receiver<T>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `channel`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `BlockData` with `#[derive(Clone)]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ #[derive(Clone)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mstruct BlockData {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type mismatch in function arguments","code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":3142,"byte_end":3150,"line_start":102,"line_end":102,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"        .and_then(websocket_handler);","highlight_start":10,"highlight_end":18}],"label":"expected due to this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1388,"byte_end":1501,"line_start":49,"line_end":49,"column_start":1,"column_end":114,"is_primary":false,"text":[{"text":"async fn websocket_handler(ws: warp::ws::Ws, tx: mpsc::Sender<BlockData>) -> Result<impl warp::Reply, Infallible> {","highlight_start":1,"highlight_end":114}],"label":"found signature defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected function signature `fn(Ws, tokio::sync::broadcast::Sender<BlockData>) -> _`\n   found function signature `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> _`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}` to implement `warp::generic::Func<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0631]\u001b[0m\u001b[0m\u001b[1m: type mismatch in function arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:102:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn websocket_handler(ws: warp::ws::Ws, tx: mpsc::Sender<BlockData>) -> Result<impl warp::Reply, Infallible> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound signature defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .and_then(websocket_handler);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected due to this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected function signature `fn(Ws, tokio::sync::\u001b[0m\u001b[0m\u001b[1m\u001b[35mbroadcast::Sender<BlockData>\u001b[0m\u001b[0m) -> \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found function signature `fn(Ws, tokio::sync::\u001b[0m\u001b[0m\u001b[1m\u001b[35mmpsc::Sender<BlockData>\u001b[0m\u001b[0m) -> \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}` to implement `warp::generic::Func<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `run` exists for struct `Server<AndThen<And<And<Exact<Opaque<&str>>, ...>, ...>, ...>>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":3198,"byte_end":3201,"line_start":104,"line_end":104,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"    warp::serve(ws_route).run(([127, 0, 0, 1], 3030)).await;","highlight_start":27,"highlight_end":30}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/filter/and_then.rs","byte_start":263,"byte_end":287,"line_start":12,"line_end":12,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"pub struct AndThen<T, F> {","highlight_start":1,"highlight_end":25}],"label":"doesn't satisfy `_: FilterBase` or `_: Filter`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/filter/and_then.rs","byte_start":976,"byte_end":1006,"line_start":37,"line_end":37,"column_start":1,"column_end":31,"is_primary":false,"text":[{"text":"pub struct AndThenFuture<T, F>","highlight_start":1,"highlight_end":31}],"label":"doesn't satisfy `<_ as Future>::Output = Result<_, _>` or `_: Future`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/Users/yoonjae/websocket_rs/mina_server/target/debug/deps/mina_server-67a183599a8a3fe4.long-type-4960024478739274610.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}>: warp::Filter`\n`warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}>: warp::filter::FilterBase`\nwhich is required by `warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}>: warp::Filter`\n`fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: warp::generic::Func<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\n`<fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler} as FnOnce<(Ws, tokio::sync::broadcast::Sender<BlockData>)>>::Output = _`\n`fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: Fn<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\n`fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: FnMut<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\nwhich is required by `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: Fn<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\n`fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: FnOnce<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\nwhich is required by `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: Fn<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\n`<warp::filter::and_then::AndThenFuture<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}> as Future>::Output = Result<_, _>`\n`warp::filter::and_then::AndThenFuture<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}>: Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `run` exists for struct `Server<AndThen<And<And<Exact<Opaque<&str>>, ...>, ...>, ...>>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:104:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    warp::serve(ws_route).run(([127, 0, 0, 1], 3030)).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/yoonjae/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/filter/and_then.rs:12:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AndThen<T, F> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: FilterBase` or `_: Filter`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AndThenFuture<T, F>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Future>::Output = Result<_, _>` or `_: Future`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/yoonjae/websocket_rs/mina_server/target/debug/deps/mina_server-67a183599a8a3fe4.long-type-4960024478739274610.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}>: warp::Filter`\u001b[0m\n\u001b[0m            `warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}>: warp::filter::FilterBase`\u001b[0m\n\u001b[0m            which is required by `warp::filter::and_then::AndThen<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}>: warp::Filter`\u001b[0m\n\u001b[0m            `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: warp::generic::Func<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\u001b[0m\n\u001b[0m            `<fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler} as FnOnce<(Ws, tokio::sync::broadcast::Sender<BlockData>)>>::Output = _`\u001b[0m\n\u001b[0m            `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: Fn<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\u001b[0m\n\u001b[0m            `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: FnMut<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\u001b[0m\n\u001b[0m            which is required by `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: Fn<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\u001b[0m\n\u001b[0m            `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: FnOnce<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\u001b[0m\n\u001b[0m            which is required by `fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}: Fn<(Ws, tokio::sync::broadcast::Sender<BlockData>)>`\u001b[0m\n\u001b[0m            `<warp::filter::and_then::AndThenFuture<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}> as Future>::Output = Result<_, _>`\u001b[0m\n\u001b[0m            `warp::filter::and_then::AndThenFuture<warp::filter::and::And<warp::filter::and::And<Exact<warp::path::internal::Opaque<&str>>, impl warp::Filter + warp::filter::FilterBase<Extract = (Ws,), Error = Rejection> + Copy>, warp::filter::map::Map<impl warp::Filter + warp::filter::FilterBase<Extract = (), Error = Infallible> + Copy, {closure@src/main.rs:101:30: 101:37}>>, fn(Ws, tokio::sync::mpsc::Sender<BlockData>) -> impl Future<Output = Result<impl Reply, Infallible>> {websocket_handler}>: Future`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0432, E0599, E0631.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0432, E0599, E0631.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
